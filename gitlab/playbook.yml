- hosts: myhosts
  tasks:
  #O BUG TA NA NETWORK
  # - name: Debug external_url
  #   debug:
  #     var: hostvars['gitlab']['container_name']

  - name: Update
    apt:
      update_cache: yes

  - name: Requiriments.
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - python3
        - python3-pip
      state: present
    when: ansible_distribution == 'Ubuntu'

  - name: Verificação - docker já instalado.
    command: docker --version
    register: docker_version
    ignore_errors: yes
    changed_when: false

  - name: Etapa instalação do docker - adicionado chave.
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    when: ansible_distribution == 'Ubuntu' and docker_version.rc != 0

  - name: Etapa instalação do docker - adicionado repositório.
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
      state: present
    when: ansible_distribution == 'Ubuntu' and docker_version.rc != 0

  - name: Etapa instalação do docker - instalação docker.
    apt:
      name: docker-ce
      state: present
    when: ansible_distribution == 'Ubuntu' and docker_version.rc != 0

  - name: Verificação - docker compose já instalado.
    command: docker-compose --version
    register: docker_compose_version
    ignore_errors: yes
    changed_when: false

  - name: Instalação docker compose
    command: sudo apt-get install -y docker-compose
    when: docker_compose_version.rc != 0

  - name: Verificação - Network docker.
    command: docker network inspect network-gitlab
    register: network_inspect
    ignore_errors: true

  - name: Criação network docker.
    docker_network:
      name: network-gitlab
      state: present
      driver: bridge
    when: network_inspect.rc != 0  # Cria a rede apenas se o comando de inspeção falhar

  - name: Verificação - Existencia do diretório 4 docker volume.
    stat:
      path: /var/www/docker/gitlab
    register: gitlab_directory_check

  - name: Criação do diretório 4 docker volume.
    file:
      path: /var/www/docker/gitlab
      state: directory
    when: not gitlab_directory_check.stat.exists

  - name: Envio de arquivo - Nginx.conf
    copy:
      src: ./nginx.conf  # Caminho do arquivo localmente
      dest: /var/www/docker/gitlab  # Diretório no servidor onde o arquivo será copiado

  - name: Verificação - container gitlab.
    docker_container_info:
      name: "{{ hostvars['gitlab']['container_name'] }}"
    register: gitlab_container_info

  - name: Criação container gitlab.
    docker_container:
      name: "{{ hostvars['gitlab']['container_name'] }}"
      image: gitlab/gitlab-ce:latest
      hostname: "{{ hostvars['gitlab']['domain'] }}"
      restart_policy: always
      env:
        GITLAB_OMNIBUS_CONFIG: |
          external_url 'https://{{ hostvars['gitlab']['domain'] }}'
          gitlab_rails['initial_root_password'] = 'SENHA_DO_ROOT_SUPER_SECRETA'
      ports:
        - "443:443"
        - "1022:22"
      volumes:
        - "/var/www/docker/gitlab/config:/etc/gitlab"
        - "/var/www/docker/gitlab/logs:/var/log/gitlab"
        - "/var/www/docker/gitlab/data:/var/opt/gitlab"
      networks:
        - name: network-gitlab
      shm_size: "256m"
    when: not gitlab_container_info.exists

  - name: Verificação - container nginx.
    docker_container_info:
      name: "{{ hostvars['nginx']['container_name'] }}"
    register: nginx_container_info

  - name: Criação container nginx.
    docker_container:
      name: "{{ hostvars['nginx']['container_name'] }}"
      image: nginx:latest
      hostname: "{{ hostvars['nginx']['domain'] }}"
      restart_policy: always
      volumes:
        - '/var/www/docker/gitlab/nginx.conf:/etc/nginx/nginx.conf'
      ports:
        - '80:80'
      networks:
        - name: network-gitlab
    when: not nginx_container_info.exists

  - name: Verificação - container gitlab runner.
    docker_container_info:
      name: "{{ hostvars['runner']['container_name'] }}"
    register: gitlab_runner_container_info
    ignore_errors: true

  - name: Criação container gitlab runner.
    docker_container:
      name: "{{ hostvars['runner']['container_name'] }}"
      image: gitlab/gitlab-runner:latest
      state: started
      detach: true
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
      networks:
        - name: network-gitlab
      privileged: true
    when: not gitlab_runner_container_info.exists
